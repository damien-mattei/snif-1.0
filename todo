

* rajouter une option pour ne pas calculer les tcp checksum voir man tcpdump option -K


* lire le rfc IPnG dans scratch/ et s'aider du livre de douglas corner
 ipv6 pas utilise dasn internet et pas encore defini completement !


* avancer ip v6 , SUP_IP6 defini lorsque support ipv6,utilise aussi dans sfutil a MAJ peut etre
 , ip v6 pas encore bien decode dans snort (pas adresses src/dst)
	pourquoi ipv6_defrag semble utile pour BSD ? mais peut etre aussi sur d'autres systemes
 en tout cas la fragmentation sera dans les futures versions
 ip V6 : la defragmentation differe de ip v4 mais ca ne concerne pas l'analyzeur de trames

* continuer avec le decodage des options IP :


	The following internet options are defined:

      CLASS NUMBER LENGTH DESCRIPTION
      ----- ------ ------ -----------
   OK   0     0      -    End of Option list.  This option occupies only
                          1 octet; it has no length octet.
   OK   0     1      -    No Operation.  This option occupies only 1
                          octet; it has no length octet.
   TODO 0     2     11    Security.  Used to carry Security,
                          Compartmentation, User Group (TCC), and
                          Handling Restriction Codes compatible with DOD
                          requirements.
   OK   0     3     var.  Loose Source Routing.  Used to route the
                          internet datagram based on information
                          supplied by the source.
   OK   0     9     var.  Strict Source Routing.  Used to route the
                          internet datagram based on information
                          supplied by the source.
   OK   0     7     var.  Record Route.  Used to trace the route an
                          internet datagram takes.
   OK   0     8      4    Stream ID.  Used to carry the stream
                          identifier.
   OK   2     4     var.  Internet Timestamp.


 option securité,etc ; log.c decode.c DecodeIPOptions PrintIPHeader, inclure le decodage des options IP,eventuellement printipoptions de log.c meme si les options sont mises dans Packet qui n'est pas une trame mais une structure interne a snort (voir decodeIPoptions de snort) voir example à la fin de RFC791:


Here, we show an example of a datagram containing options:

                                    
    0                   1                   2                   3   
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Ver= 4 |IHL= 8 |Type of Service|       Total Length = 576      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Identification = 111    |Flg=0|     Fragment Offset = 0 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Time = 123  |  Protocol = 6 |       Header Checksum         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        source address                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      destination address                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Opt. Code = x | Opt.  Len.= 3 | option value  | Opt. Code = x |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Opt. Len. = 4 |           option value        | Opt. Code = 1 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Opt. Code = y | Opt. Len. = 3 |  option value | Opt. Code = 0 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             data                              |
   \                                                               \
   \                                                               \
   |                             data                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             data                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


* continuer de decoder GRE http://tools.ietf.org/html/rfc1701

* faire un script qui modifie l'email partout : 
  find * -type f -exec sed -i "s/@users.sorceforge.net/@free.fr/" '{}' \;
	necessite au moins sed version 4.0.5

  sur mac os X.13 utiliser:
  find * -type f -exec sed -i '' -e "s/@free.fr/@orange.fr/" '{}' \;
 

* decodage TOS (type of service dans IP) en mode verbeux


* terminer le decodage de TCP options ICMP seq UDP ?
  ICMP: afficher les codes non definis ! (militaire?)

* voir ce qu'il est préférable d'afficher :frame Ethernet, Frame Token Ring ,Datagram IP,Segment TCP... UDP...

* afficher : eth card type (peut etre trop long!)

* securite : tester si les fichiers de données sont corrects (test à chaque ligne lue) 

* corriger le risque de buffer overflow dans InitHashTable 
(
  while ((c = fgetc (fd)) != EOF && c != '\n') {
    tmpstr[i++] = c;
  }
)
si fichier corrompu ecriture dans la mémoire


* afficher Sniff Network Interface Frames au lancement du programme

* option pour plusieurs lignes vide (CR) comme separateur entre les trames

* option: fleches : --> (peut etre un peu lourd!)

pour developper:

rm -rf aclocal.m4 autom4te*.cache  autoscan.log config.h config.h.in  config.log config.status configure configure.scan depcomp .deps install-sh  Makefile.in missing mkinstalldirs *~ *.o snif Makefile


faire:

#autoscan 

aclocal && autoheader -f

automake -acf && autoconf -f

./configure

make 

note: si Makefile.am est touché make relancera autotools automatiquement donc il n'est pas toujours necessaire de tout refaire (du moins sous linux FC3,5 - marche pas sous RH7 et RH9)



* faire une option pcap_openoffline (lecture d'un fichier de données au format tcpdump), utile pour open bsd pf log et si quelqu'un a enregistre des trames token ring pour tester

* dans DecodeUDP a partir de snort version 2.4.3 on a:
 (!p->frag_flag)
    {
        uhlen = ntohs(p->udph->uh_len);
    }
    else
    {
        u_int16_t ip_len = ntohs(p->iph->ip_len);
        /* Don't forget, IP_HLEN is a word - multiply x 4 */
        uhlen = ip_len - (IP_HLEN(p->iph) * 4 );
        p->udph->uh_chk = 0;
    }

c'est bizarre car on calcule de deux manieres differentes  la longueur du header udp dans le cas ou le packet est fragmente ou non! la deuxieme methode semble fausse car on a calculé la longueur du packet udp (header + donnees)

* voir bin_PROGRAMS versus sbin_PROGRAMS

* aprés un Bad tcp checksum on decode quand meme le reste , on devrait peut etre pas


* ce qui suit est obsolete car interface wifi reconnu de type ethernet sous linux et mac os X:verifier le decodage des 4 adresses hardware wifi avec deux bornes plus deux stations et verifier la longueur d'un packet wifi car la definition de IEEE802_11_DATA_HDR_LEN (24) n'est pas celle de sizeof(WifiHdr) (30), que penser aussi de MINIMAL_IEEE80211_HEADER_LEN (10) ?

* voir log.c dans snort, affichage de token ring header et ethernet (y a du boulot...)
  ajout plus tard d'un mode verbose plus complet (se contenter des addresses pour l'instant et ne pas decoder arp et revarp)

* voir la difference entre caplen et len (possible explication des packets tronqués sous Darwin)



* reverse arp ? attention : snort ne decode ni arp ni revarp voir tcpdump printarp.c est-ce necessaire snif n'a par pretention a concurrencer tcpdump...

*  le source code de arp  extrait les infos du cache (arp -i eth0 -a) en lisant betement  /proc/net/arp mais ce n'est pas portable sur mac os x la solution serait d'utiliser ether_ntohost ou ether_line mais j'ai dejà essayé :ça marche pas car les developpeurs ne la maintiennent pas à jour.

* voir si il y a bien une difference  d'affichage entre arp et revarp



* voire si /usr/local/share/ peut etre changé pour les données (codé en dur dans le source pour l'instant), c' est défini par prefix

* page de manuel,configure pour  pages de manuel 


* D.R.O.O.P.Y/I Direct/Dump & Read On/Of Online Packets Yarn/Information

* s'occuper de decodeIPX

* verifier que en root le configure marche bien (cp -f ??) 


* affichage des données (hexa,characteres)
  affichage en couleur des donnees hexa de la trame ,une couleur par layer ,necessite de garder l'offset de chaque debut de layer 

* afficher des stats à la fin du programme (nombre de trames,nombre de IP,ARP,TCP,UDP),compter les discarded packets?


* par defaut faire les resolutions DNS



* inclure la compilation d'un filtre donné sur la ligne de 
commande (pcapcompile) 


* inclure la recherche d'une chaine de caracteres


* package analyseur de trames,cartographie du reseau (utiliser des outils sur le web , googler 'ip geographic location',....) . 


* ne pas utiliser du code de tcpdump car la notice de licence du LBL est contraignante
 
* version windows (cf snort)

* decodeEap* est incomplet parceque  incorrect dans snort

* afficher le temps de chaque packet comme tcpdump (actuellement la precision est de 1s)

* ports number passe en xml ! la version texte est incompatible, pour l'instant utiliser les anciennes version ensuite soit parser l'xml mais certains chammps sont trop verbeux pour un analyzeur de trame mais ils sont rares,reprendre /etc/service serait une regression.